/**
 *  –≠—Ç–æ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –±–∞–∑–æ–≤—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã –º–µ—Ç–æ–¥–æ–≤.
 *  –ï–≥–æ –º–æ–∂–Ω–æ –Ω–µ —Å–º–æ—Ç—Ä–µ—Ç—å üôà
 -------------------------------------------------------------------------
 */

const makePromise = (num, isReject = false) => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (isReject)  reject(num);
      resolve(num);

    }, Math.random() * 2220)
  });
};



const anyBtn = document.getElementById('any');
anyBtn.addEventListener('click', () => {
  let test_any = [
    makePromise(1),
    makePromise(2),
    makePromise(3),
    makePromise(4),
  ];
  console.log('—Å—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞ Promise._any')
  Promise._any(test_any, 0)
    .then((data) => {
      console.log(`Promise._any –≤–µ—Ä–Ω—É–ª ${data}`)
    })
    .catch((e) => {
      console.log('Promise._any –≤–µ—Ä–Ω—É–ªc—è c –æ—à–∏–±–∫–æ–π', e);
    })
})


const allBtn = document.getElementById('all');

allBtn.addEventListener('click', () => {
  let test_allSettled = [
    makePromise(5),
    makePromise(6),
    makePromise(7),
    makePromise(8),
  ];
  console.log('—Å—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞ Promise._allSettled');
  Promise._allSettled(test_allSettled, 0)
    .then((data) => {
      console.log(`Promise._allSettled –≤–µ—Ä–Ω—É–ª ${data}`)
    })
})

const finallyBtn = document.getElementById('finally');
finallyBtn.addEventListener('click', () => {
  console.log('—Å—Ç–∞—Ä—Ç —Ç–µ—Å—Ç–∞ _finally —Å resolve');
  makePromise(1)
    .then((data) => {
      console.log(`—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–º–∏—Å ${data} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è`)
    })
    ._finally(() => {
        console.log('–∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è _finally –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
      }
    )
  console.log('—Å—Ç–∞—Ä—Ç _finally —Å reject')
  makePromise(2, true)
    .catch((data) => {
      console.log(`—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–º–∏—Å ${data} –ª–æ–≤–∏—Ç—Å—è –≤ catch`)
    })
    ._finally(() => {
        console.log('–∑–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è _finally –ø–æ—Å–ª–µ reject')
      }
    )

})
